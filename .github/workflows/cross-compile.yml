name: Cross Compile test

on:
  workflow_dispatch:
    branches: [master]

env:
  DOCKER_REPO_NAME: nextek
  DOCKER_IMAGE_NAME: openttd

jobs:
  get_versions:
    name: Fetch OTTD Versions
    runs-on: ubuntu-latest
    steps:
      - name: get versions
        id: get_versions
        # yamllint disable-line rule:line-length
        run: |
          echo "target=$(curl -s -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/OpenTTD/OpenTTD/releases | jq -cMr '.[:1]|.[]|.tag_name')" >> $GITHUB_OUTPUT
          echo "latest=$(curl -s -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/OpenTTD/OpenTTD/releases | jq -cMr '([.[]|select(all(.tag_name; contains("beta")|not))])|.[:1]|.[].tag_name')" >> $GITHUB_OUTPUT
      - name: Output version string
        run: |
          echo ${{ steps.get_versions.outputs.target }}
          echo ${{ steps.get_versions.outputs.latest }}
      - name: Clone OpenTTD Source
        run: |
          git clone --depth 1 --branch "${{ steps.get_versions.outputs.target }}" https://github.com/OpenTTD/OpenTTD.git ./src
      - name: Output OpenTTD Path
        run: |
          ls ${{ github.workspace }}/src
          echo Version:
          head -1 ${{ github.workspace }}/src/changelog.txt
      - name: Cache src
        id: cache-src
        uses: actions/cache/save@v3
        with:
          path: ./src
          key: ottd-${{ steps.get_versions.outputs.target }}
    outputs:
      target: ${{ steps.get_versions.outputs.target }}
      latest: ${{ steps.get_versions.outputs.latest }}

  # fetch_openttd_source:
  #   name: Cache OTTD Source
  #   runs-on: ubuntu-latest
  #   needs: get_versions
  #   #if: vars.LATEST_DEPLOY != needs.get_versions.outputs.target
  #   steps:
  #     - name: Clone OpenTTD Source
  #       run: |
  #         git clone --depth 1 --branch "${{ needs.get_versions.outputs.target }}" https://github.com/OpenTTD/OpenTTD.git ./src
  #     - name: Output OpenTTD Path
  #       run: |
  #         ls ${{ github.workspace }}/src
  #         echo Version:
  #         head -1 ${{ github.workspace }}/src/changelog.txt
  #     - name: Cache src
  #       id: cache-src
  #       uses: actions/cache/save@v3
  #       with:
  #         path: ./src
  #         key: ottd-${{ needs.get_versions.outputs.target }}

  build-push:
    name: Build OTTD Docker
    needs: [get_versions]
    strategy:
      matrix:
        include:
          - platform_tag: arm64
            platform: linux/arm64
            alpine-arch: aarch64
            runner: [ubuntu-latest]
          # - platform_tag: amd64
          #   platform: linux/amd64
          #   alpine-arch: x86_64
          #   runner: [ubuntu-latest]
          # - platform_tag: i386
          #   platform: linux/386
          #   alpine-arch: x86
          #   runner: [ubuntu-latest]
          # - platform_tag: armv7
          #   platform: linux/arm/v7
          #   alpine-arch: armv7
          #   runner: [ubuntu-latest]
          # - platform_tag: armv6
          #   platform: linux/arm/v6
          #   alpine-arch: armhf
          #   runner: [ubuntu-latest]
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
          
      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache src
        id: cache-src
        uses: actions/cache/restore@v3
        with:
          path: ./src
          key: ottd-${{ needs.get_versions.outputs.target }}

      - name: Download OTTD Source
        if: steps.cache-src.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 --branch "${{ needs.get_versions.outputs.target }}" https://github.com/OpenTTD/OpenTTD.git ./src
          head -1 ${{ github.workspace }}/src/changelog.txt

      # - name: Download OTTD Source
      #   if: steps.cache-src.outputs.cache-hit != 'true'
      #   run: |
      #     git clone --depth 1 --branch 13.2 https://github.com/OpenTTD/OpenTTD.git ./src
      #     head -1 ${{ github.workspace }}/src/changelog.txt

      # - name: Setup Host Alpine
      #   uses: jirutka/setup-alpine@v1
      #   with:
      #     shell-name: alpine-x86_64.sh
      #     packages: >
      #       build-base
      #       unzip
      #       wget
      #       git
      #       libc-dev
      #       cmake
      #       patch
      #       xz-dev
      #       pkgconfig
      #       zlib
      #       libpng
      #       lzo
      #       ninja
      #       musl-dev 
      #       gcc 
      #       nlohmann-json 
      #       libcurl 
      #       sdl2 
      #       libpng 
      #       libgcc 
      #       libtool 
      #       linux-headers 
      #       g++ 
      #       curl

      - name: Setup Build Directories
        run: |
          mkdir ./native
          mkdir ./cross-compile
          cp -r ./src/* ./native
          cp -r ./src/* ./cross-compile

      - name: Setup Native Alpine
        uses: jirutka/setup-alpine@v1
        with:
          arch: ${{ matrix.alpine-arch }}
          shell-name: alpine-native.sh
          packages: |
            build-base
            unzip
            wget
            git
            libc-dev
            cmake
            patch
            xz-dev
            pkgconfig
            zlib
            libpng
            lzo
            ninja
            musl-dev gcc nlohmann-json libcurl sdl2 libpng libgcc libtool linux-headers g++ curl

      - name: Setup Cross-Compile Alpine
        uses: jirutka/setup-alpine@v1
        with:
          arch: x86_64
          shell-name: alpine-cross.sh
          packages: |
            build-base
            unzip
            wget
            git
            libc-dev
            cmake
            patch
            xz-dev
            pkgconfig
            zlib
            libpng
            lzo
            ninja
            musl-dev gcc nlohmann-json libcurl sdl2 libpng libgcc libtool linux-headers g++ curl
          # build-base
          # unzip
          # wget
          # git
          # libc-dev
          # cmake
          # patch
          # xz-dev
          # pkgconfig
          # zlib
          # libpng
          # lzo
          # ninja
          # musl-dev 
          # gcc 
          # nlohmann-json 
          # libcurl 
          # sdl2 
          # libpng 
          # libgcc 
          # libtool 
          # linux-headers 
          # g++ 
          # curl

      - name: Build Native Tools
        run: |
          mkdir ./native-build
          cd ./native-build

          cmake \
          -A
          -D OPTION_DEDICATED=ON \
          -D OPTION_INSTALL_FHS=OFF \
          -D CMAKE_BUILD_TYPE=release \
          -D GLOBAL_DIR=/app\
          -D PERSONAL_DIR=/ \
          -D CMAKE_BINARY_DIR=bin \
          -D CMAKE_INSTALL_PREFIX=/app \
          -D OPTION_TOOLS_ONLY=ON \
          -G Ninja \
          ../native
          ninja -j$(nproc) 
        shell: alpine-native.sh --root {0}

      - name: Cross-Compile Game
        run: |
          mkdir ./cross-compile-build
          cd ./cross-compile-build

          cmake \
          -A
          -D OPTION_DEDICATED=ON \
          -D OPTION_INSTALL_FHS=OFF \
          -D CMAKE_BUILD_TYPE=release \
          -D GLOBAL_DIR=/app\
          -D PERSONAL_DIR=/ \
          -D CMAKE_BINARY_DIR=bin \
          -D CMAKE_INSTALL_PREFIX=/app \
          -D OPTION_TOOLS_ONLY=ON \
          -D HOST_BINARY_DIR=../native-build \
          -G Ninja \
          ../cross-compile
          ninja -j$(nproc) 
          ninja install
          ls -R .
          ls -R /app
        shell: alpine-cross.sh --root {0}

      # - name: Run script on the host system (Ubuntu)
      #   run: |
      #     mkdir ./host_build
      #     cd ./host_build

      #     cmake \
      #     -D OPTION_DEDICATED=ON \
      #     -DCMAKE_BUILD_TYPE=RelWithDebInfo \
      #     -DOPTION_TOOLS_ONLY=ON \
      #     -G Ninja \
      #     ../src
      #     ninja -j$(nproc) 
      #     ls -R .
      #   shell: alpine-target.sh --root {0}


      # - name: Run script on the target system (Ubuntu)
      #   run: |
      #     ls -R ./host_build
      #     mkdir ./app_build
      #     cd ./app_build

      #     cmake \
      #     -A
      #     -D OPTION_DEDICATED=ON \
      #     -D OPTION_INSTALL_FHS=OFF \
      #     -D CMAKE_BUILD_TYPE=release \
      #     -D GLOBAL_DIR=/app\
      #     -D PERSONAL_DIR=/ \
      #     -D CMAKE_BINARY_DIR=bin \
      #     -D CMAKE_INSTALL_PREFIX=/app \
      #     -D HOST_BINARY_DIR=../host_build \
      #     -G Ninja \
      #     ../src
      #     ninja -j$(nproc) 
      #     ninja install
      #     ls -R .
      #     ls -R /app
      #   shell: alpine-target.sh --root {0}

      # - name: UnCache build
      #   id: load-build
      #   uses: actions/cache/restore@v3
      #   with:
      #     path: ./app_build
      #     key: ottd-${{ matrix.platform_tag }}

      # - name: Setup Empty Build dir
      #   if: steps.load-build.outputs.cache-hit != 'true'
      #   run: |
      #     mkdir ./app_build

      # - name: Run script on the target system (Ubuntu)
      #   run: |
      #     cd ./app_build

      #     cmake \
      #     -D OPTION_DEDICATED=ON \
      #     -D OPTION_INSTALL_FHS=OFF \
      #     -D CMAKE_BUILD_TYPE=release \
      #     -D CMAKE_BINARY_DIR=bin \
      #     -D CMAKE_INSTALL_PREFIX=/app \
      #     -G Ninja \
      #     ../src
      #     ninja -j$(nproc) 
      #     ninja install
      #     ls -R .
      #     ls -R /app
      #   shell: alpine-target.sh --root {0}


      # - name: Cache build
      #   id: cache-build
      #   uses: actions/cache/save@v3
      #   with:
      #     path: ./app_build
      #     key: ottd-${{ matrix.platform_tag }}

      

      # - name: Docker meta
      #   id: meta
      #   uses: docker/metadata-action@v4
      #   with:
      #     images: |
      #       ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}
      #       ghcr.io/${{ github.repository }}
      #     flavor: |
      #       latest=false
      #       suffix=-${{ matrix.platform_tag }}
      #     tags: |
      #       type=raw,value=latest,enable=${{ needs.get_versions.outputs.target == needs.get_versions.outputs.latest }}
      #       type=raw,value=${{ needs.get_versions.outputs.target }}

      # - name: Build and push
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     push: true
      #     platforms: ${{ matrix.platform }}
      #     build-contexts: openttd=${{ github.workspace }}/src
      #     tags: ${{ steps.meta.outputs.tags }}
