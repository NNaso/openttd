name: Docker Build Latest

on:
  workflow_dispatch:
    branches: [master]

env:
  DOCKER_REPO_NAME: nextek
  DOCKER_IMAGE_NAME: openttd

jobs:
  get_versions:
    name: Fetch OTTD Versions
    runs-on: ubuntu-latest
    steps:
      - name: get versions
        id: get_versions
        # yamllint disable-line rule:line-length
        run: |
          echo "target=$(curl -s -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/OpenTTD/OpenTTD/releases | jq -cMr '.[:1]|.[]|.tag_name')" >> $GITHUB_OUTPUT
          echo "latest=$(curl -s -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/OpenTTD/OpenTTD/releases | jq -cMr '([.[]|select(all(.tag_name; contains("beta")|not))])|.[:1]|.[].tag_name')" >> $GITHUB_OUTPUT
      - name: Output version string
        run: |
          echo ${{ steps.get_versions.outputs.target }}
          echo ${{ steps.get_versions.outputs.latest }}
    outputs:
      target: ${{ steps.get_versions.outputs.target }}
      latest: ${{ steps.get_versions.outputs.latest }}

  build-manifest:
    name: Create Multi-Platform Manifest
    runs-on: ubuntu-latest
    needs: [get_versions]
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Docker Hub Create version manifest and push
        run: |
          docker manifest create \
            ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.get_versions.outputs.target }} \
            --amend ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.get_versions.outputs.target }}-amd64 \
            --amend ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.get_versions.outputs.target }}-i386 \
            --amend ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.get_versions.outputs.target }}-arm64 \
            --amend ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.get_versions.outputs.target }}-armv7 \
            --amend ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.get_versions.outputs.target }}-armv6 
          docker manifest push ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.get_versions.outputs.target }}

      - name: Docker Hub Create latest manifest and push
        if: needs.get_versions.outputs.latest == needs.get_versions.outputs.target
        run: |
          docker manifest create \
            ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest \
            --amend ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest-amd64 \
            --amend ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest-i386 \
            --amend ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest-arm64 \
            --amend ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest-armv7 \
            --amend ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest-armv6
          docker manifest push ${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          
      - name: Tolower - repository_owner
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository }}'
          
      - name: GHCR Create version manifest and push
        run: |
          docker manifest create \
            ghcr.io/${{ OWNER_LC }}:${{ needs.get_versions.outputs.target }} \
            --amend ghcr.io/${{ OWNER_LC }}:${{ needs.get_versions.outputs.target }}-amd64 \
            --amend ghcr.io/${{ OWNER_LC }}:${{ needs.get_versions.outputs.target }}-i386 \
            --amend ghcr.io/${{ OWNER_LC }}:${{ needs.get_versions.outputs.target }}-arm64 \
            --amend ghcr.io/${{ OWNER_LC }}:${{ needs.get_versions.outputs.target }}-armv7 \
            --amend ghcr.io/${{ OWNER_LC }}:${{ needs.get_versions.outputs.target }}-armv6 
          docker manifest push ghcr.io/${{ OWNER_LC }}:${{ needs.get_versions.outputs.target }}

      - name: GHCR Create latest manifest and push
        if: needs.get_versions.outputs.latest == needs.get_versions.outputs.target
        run: |
          docker manifest create \
            ghcr.io/${{ OWNER_LC }}:latest \
            --amend ghcr.io/${{ OWNER_LC }}:latest-amd64 \
            --amend ghcr.io/${{ OWNER_LC }}:latest-i386 \
            --amend ghcr.io/${{ OWNER_LC }}:latest-arm64 \
            --amend ghcr.io/${{ OWNER_LC }}:latest-armv7 \
            --amend ghcr.io/${{ OWNER_LC }}:latest-armv6
          docker manifest push ghcr.io/${{ OWNER_LC }}:latest

      - name: Update latest deployed version
        run: |
          curl -X PATCH https://api.github.com/repositories/655397334/actions/variables/LATEST_DEPLOY -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.WEB_API }}" -H "X-GitHub-Api-Version: 2022-11-28" -d '{"name":"LATEST_DEPLOY", "value":"${{ needs.get_versions.outputs.latest }}"}'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKER_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.get_versions.outputs.target }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   if: always()
      #   with:
      #     sarif_file: 'trivy-results.sarif'
